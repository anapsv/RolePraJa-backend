generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique @db.VarChar(20)
  password  String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  Comment   Comment[]
  Post      Post[]

  @@map("users")
}

model EstablishmentOwner {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  establishment String   @unique
  password      String
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @db.Timestamptz(6)
  Event         Event[]

  @@map("establishmentOwners")
}

model Event {
  id        Int                @id @default(autoincrement())
  userId    Int
  content   String
  createdAt DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt DateTime           @default(now()) @db.Timestamptz(6)
  user      EstablishmentOwner @relation(fields: [userId], references: [id])

  @@map("events")
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String   @db.VarChar(180)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])

  @@map("posts")
}

// model UpvotePost {
//   id        String   @id @default(uuid())
//   userId    String
//   postId    String
//   createdAt DateTime @default(now()) @db.Timestamptz(6)
//   updatedAt DateTime @default(now()) @db.Timestamptz(6)
//   post      Post     @relation(fields: [postId], references: [id])
//   user      User     @relation(fields: [userId], references: [id])

//   @@unique([userId, postId])
//   @@map("upvotePosts")
// }

// model DownvotePost {
//   id        String   @id @default(uuid())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String
//   createdAt DateTime @default(now()) @db.Timestamptz(6)
//   updatedAt DateTime @default(now()) @db.Timestamptz(6)

//   @@unique([userId, postId])
//   @@map("downvotePosts")
// }

// model StarEvent {
//   id        String   @id @default(uuid())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   event     Event    @relation(fields: [eventId], references: [id])
//   eventId   String
//   createdAt DateTime @default(now()) @db.Timestamptz(6)
//   updatedAt DateTime @default(now()) @db.Timestamptz(6)

//   @@unique([userId, eventId])
//   @@map("starEvents")
// }

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String   @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}
